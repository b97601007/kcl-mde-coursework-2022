/**
 * generated by Xtext 2.25.0
 */
package uk.ac.kcl.inf.simpMusic.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import uk.ac.kcl.inf.simpMusic.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see uk.ac.kcl.inf.simpMusic.SimpMusicPackage
 * @generated
 */
public class SimpMusicSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static SimpMusicPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SimpMusicSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = SimpMusicPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case SimpMusicPackage.SIMPLE_MUSIC:
      {
        SimpleMusic simpleMusic = (SimpleMusic)theEObject;
        T result = caseSimpleMusic(simpleMusic);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpMusicPackage.NOTE:
      {
        Note note = (Note)theEObject;
        T result = caseNote(note);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpMusicPackage.LOOP_NOTE:
      {
        LoopNote loopNote = (LoopNote)theEObject;
        T result = caseLoopNote(loopNote);
        if (result == null) result = caseNote(loopNote);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpMusicPackage.SOLFEGE:
      {
        Solfege solfege = (Solfege)theEObject;
        T result = caseSolfege(solfege);
        if (result == null) result = caseNote(solfege);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpMusicPackage.SLEEP:
      {
        Sleep sleep = (Sleep)theEObject;
        T result = caseSleep(sleep);
        if (result == null) result = caseNote(sleep);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpMusicPackage.SOLFEGE_WITH_MODIFICATION:
      {
        SolfegeWithModification solfegeWithModification = (SolfegeWithModification)theEObject;
        T result = caseSolfegeWithModification(solfegeWithModification);
        if (result == null) result = caseNote(solfegeWithModification);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpMusicPackage.MODIFICATION:
      {
        Modification modification = (Modification)theEObject;
        T result = caseModification(modification);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpMusicPackage.AMPLITUDE:
      {
        Amplitude amplitude = (Amplitude)theEObject;
        T result = caseAmplitude(amplitude);
        if (result == null) result = caseModification(amplitude);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpMusicPackage.TIMBRE:
      {
        Timbre timbre = (Timbre)theEObject;
        T result = caseTimbre(timbre);
        if (result == null) result = caseModification(timbre);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SimpMusicPackage.TONE:
      {
        Tone tone = (Tone)theEObject;
        T result = caseTone(tone);
        if (result == null) result = caseModification(tone);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Simple Music</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Simple Music</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSimpleMusic(SimpleMusic object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Note</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Note</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseNote(Note object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Loop Note</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Loop Note</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseLoopNote(LoopNote object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Solfege</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Solfege</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSolfege(Solfege object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sleep</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sleep</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSleep(Sleep object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Solfege With Modification</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Solfege With Modification</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSolfegeWithModification(SolfegeWithModification object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Modification</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Modification</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModification(Modification object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Amplitude</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Amplitude</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseAmplitude(Amplitude object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Timbre</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Timbre</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTimbre(Timbre object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Tone</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Tone</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTone(Tone object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //SimpMusicSwitch
