/**
 * generated by Xtext 2.25.0
 */
package uk.ac.kcl.inf.simpMusic.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import uk.ac.kcl.inf.simpMusic.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class SimpMusicFactoryImpl extends EFactoryImpl implements SimpMusicFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static SimpMusicFactory init()
  {
    try
    {
      SimpMusicFactory theSimpMusicFactory = (SimpMusicFactory)EPackage.Registry.INSTANCE.getEFactory(SimpMusicPackage.eNS_URI);
      if (theSimpMusicFactory != null)
      {
        return theSimpMusicFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new SimpMusicFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SimpMusicFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case SimpMusicPackage.SIMPLE_MUSIC: return createSimpleMusic();
      case SimpMusicPackage.NOTE: return createNote();
      case SimpMusicPackage.LOOP_NOTE: return createLoopNote();
      case SimpMusicPackage.SOLFEGE: return createSolfege();
      case SimpMusicPackage.SLEEP: return createSleep();
      case SimpMusicPackage.SOLFEGE_WITH_MODIFICATION: return createSolfegeWithModification();
      case SimpMusicPackage.MODIFICATION: return createModification();
      case SimpMusicPackage.AMPLITUDE: return createAmplitude();
      case SimpMusicPackage.TIMBRE: return createTimbre();
      case SimpMusicPackage.TONE: return createTone();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case SimpMusicPackage.SOLFA:
        return createSolfaFromString(eDataType, initialValue);
      case SimpMusicPackage.AMP_TYPE:
        return createAmpTypeFromString(eDataType, initialValue);
      case SimpMusicPackage.TIMBRE_TYPE:
        return createTimbreTypeFromString(eDataType, initialValue);
      case SimpMusicPackage.TONE_TYPE:
        return createToneTypeFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case SimpMusicPackage.SOLFA:
        return convertSolfaToString(eDataType, instanceValue);
      case SimpMusicPackage.AMP_TYPE:
        return convertAmpTypeToString(eDataType, instanceValue);
      case SimpMusicPackage.TIMBRE_TYPE:
        return convertTimbreTypeToString(eDataType, instanceValue);
      case SimpMusicPackage.TONE_TYPE:
        return convertToneTypeToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimpleMusic createSimpleMusic()
  {
    SimpleMusicImpl simpleMusic = new SimpleMusicImpl();
    return simpleMusic;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Note createNote()
  {
    NoteImpl note = new NoteImpl();
    return note;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LoopNote createLoopNote()
  {
    LoopNoteImpl loopNote = new LoopNoteImpl();
    return loopNote;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Solfege createSolfege()
  {
    SolfegeImpl solfege = new SolfegeImpl();
    return solfege;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Sleep createSleep()
  {
    SleepImpl sleep = new SleepImpl();
    return sleep;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SolfegeWithModification createSolfegeWithModification()
  {
    SolfegeWithModificationImpl solfegeWithModification = new SolfegeWithModificationImpl();
    return solfegeWithModification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Modification createModification()
  {
    ModificationImpl modification = new ModificationImpl();
    return modification;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Amplitude createAmplitude()
  {
    AmplitudeImpl amplitude = new AmplitudeImpl();
    return amplitude;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Timbre createTimbre()
  {
    TimbreImpl timbre = new TimbreImpl();
    return timbre;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Tone createTone()
  {
    ToneImpl tone = new ToneImpl();
    return tone;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Solfa createSolfaFromString(EDataType eDataType, String initialValue)
  {
    Solfa result = Solfa.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertSolfaToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public AmpType createAmpTypeFromString(EDataType eDataType, String initialValue)
  {
    AmpType result = AmpType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertAmpTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TimbreType createTimbreTypeFromString(EDataType eDataType, String initialValue)
  {
    TimbreType result = TimbreType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertTimbreTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ToneType createToneTypeFromString(EDataType eDataType, String initialValue)
  {
    ToneType result = ToneType.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertToneTypeToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimpMusicPackage getSimpMusicPackage()
  {
    return (SimpMusicPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static SimpMusicPackage getPackage()
  {
    return SimpMusicPackage.eINSTANCE;
  }

} //SimpMusicFactoryImpl
