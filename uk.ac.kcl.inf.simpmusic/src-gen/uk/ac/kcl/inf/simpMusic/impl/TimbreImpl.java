/**
 * generated by Xtext 2.25.0
 */
package uk.ac.kcl.inf.simpMusic.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import uk.ac.kcl.inf.simpMusic.SimpMusicPackage;
import uk.ac.kcl.inf.simpMusic.Timbre;
import uk.ac.kcl.inf.simpMusic.TimbreType;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Timbre</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.inf.simpMusic.impl.TimbreImpl#getTimbre <em>Timbre</em>}</li>
 * </ul>
 *
 * @generated
 */
public class TimbreImpl extends ModificationImpl implements Timbre
{
  /**
   * The default value of the '{@link #getTimbre() <em>Timbre</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimbre()
   * @generated
   * @ordered
   */
  protected static final TimbreType TIMBRE_EDEFAULT = TimbreType.SHARP;

  /**
   * The cached value of the '{@link #getTimbre() <em>Timbre</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTimbre()
   * @generated
   * @ordered
   */
  protected TimbreType timbre = TIMBRE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected TimbreImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SimpMusicPackage.Literals.TIMBRE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TimbreType getTimbre()
  {
    return timbre;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTimbre(TimbreType newTimbre)
  {
    TimbreType oldTimbre = timbre;
    timbre = newTimbre == null ? TIMBRE_EDEFAULT : newTimbre;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SimpMusicPackage.TIMBRE__TIMBRE, oldTimbre, timbre));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SimpMusicPackage.TIMBRE__TIMBRE:
        return getTimbre();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SimpMusicPackage.TIMBRE__TIMBRE:
        setTimbre((TimbreType)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SimpMusicPackage.TIMBRE__TIMBRE:
        setTimbre(TIMBRE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SimpMusicPackage.TIMBRE__TIMBRE:
        return timbre != TIMBRE_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (timbre: ");
    result.append(timbre);
    result.append(')');
    return result.toString();
  }

} //TimbreImpl
