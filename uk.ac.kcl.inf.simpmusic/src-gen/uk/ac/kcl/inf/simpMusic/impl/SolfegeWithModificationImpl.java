/**
 * generated by Xtext 2.25.0
 */
package uk.ac.kcl.inf.simpMusic.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import uk.ac.kcl.inf.simpMusic.Modification;
import uk.ac.kcl.inf.simpMusic.SimpMusicPackage;
import uk.ac.kcl.inf.simpMusic.Solfege;
import uk.ac.kcl.inf.simpMusic.SolfegeWithModification;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Solfege With Modification</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link uk.ac.kcl.inf.simpMusic.impl.SolfegeWithModificationImpl#getNote <em>Note</em>}</li>
 *   <li>{@link uk.ac.kcl.inf.simpMusic.impl.SolfegeWithModificationImpl#getMods <em>Mods</em>}</li>
 * </ul>
 *
 * @generated
 */
public class SolfegeWithModificationImpl extends NoteImpl implements SolfegeWithModification
{
  /**
   * The cached value of the '{@link #getNote() <em>Note</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNote()
   * @generated
   * @ordered
   */
  protected Solfege note;

  /**
   * The cached value of the '{@link #getMods() <em>Mods</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMods()
   * @generated
   * @ordered
   */
  protected EList<Modification> mods;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected SolfegeWithModificationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SimpMusicPackage.Literals.SOLFEGE_WITH_MODIFICATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Solfege getNote()
  {
    return note;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetNote(Solfege newNote, NotificationChain msgs)
  {
    Solfege oldNote = note;
    note = newNote;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SimpMusicPackage.SOLFEGE_WITH_MODIFICATION__NOTE, oldNote, newNote);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNote(Solfege newNote)
  {
    if (newNote != note)
    {
      NotificationChain msgs = null;
      if (note != null)
        msgs = ((InternalEObject)note).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SimpMusicPackage.SOLFEGE_WITH_MODIFICATION__NOTE, null, msgs);
      if (newNote != null)
        msgs = ((InternalEObject)newNote).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SimpMusicPackage.SOLFEGE_WITH_MODIFICATION__NOTE, null, msgs);
      msgs = basicSetNote(newNote, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SimpMusicPackage.SOLFEGE_WITH_MODIFICATION__NOTE, newNote, newNote));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Modification> getMods()
  {
    if (mods == null)
    {
      mods = new EObjectContainmentEList<Modification>(Modification.class, this, SimpMusicPackage.SOLFEGE_WITH_MODIFICATION__MODS);
    }
    return mods;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SimpMusicPackage.SOLFEGE_WITH_MODIFICATION__NOTE:
        return basicSetNote(null, msgs);
      case SimpMusicPackage.SOLFEGE_WITH_MODIFICATION__MODS:
        return ((InternalEList<?>)getMods()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SimpMusicPackage.SOLFEGE_WITH_MODIFICATION__NOTE:
        return getNote();
      case SimpMusicPackage.SOLFEGE_WITH_MODIFICATION__MODS:
        return getMods();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SimpMusicPackage.SOLFEGE_WITH_MODIFICATION__NOTE:
        setNote((Solfege)newValue);
        return;
      case SimpMusicPackage.SOLFEGE_WITH_MODIFICATION__MODS:
        getMods().clear();
        getMods().addAll((Collection<? extends Modification>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SimpMusicPackage.SOLFEGE_WITH_MODIFICATION__NOTE:
        setNote((Solfege)null);
        return;
      case SimpMusicPackage.SOLFEGE_WITH_MODIFICATION__MODS:
        getMods().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SimpMusicPackage.SOLFEGE_WITH_MODIFICATION__NOTE:
        return note != null;
      case SimpMusicPackage.SOLFEGE_WITH_MODIFICATION__MODS:
        return mods != null && !mods.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //SolfegeWithModificationImpl
