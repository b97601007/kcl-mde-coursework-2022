/**
 * generated by Xtext 2.25.0
 */
package uk.ac.kcl.inf.simpMusic.impl;

import org.eclipse.emf.ecore.EAttribute;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EEnum;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EReference;

import org.eclipse.emf.ecore.impl.EPackageImpl;

import uk.ac.kcl.inf.simpMusic.AmpType;
import uk.ac.kcl.inf.simpMusic.Amplitude;
import uk.ac.kcl.inf.simpMusic.LoopNote;
import uk.ac.kcl.inf.simpMusic.Modification;
import uk.ac.kcl.inf.simpMusic.Note;
import uk.ac.kcl.inf.simpMusic.SimpMusicFactory;
import uk.ac.kcl.inf.simpMusic.SimpMusicPackage;
import uk.ac.kcl.inf.simpMusic.SimpleMusic;
import uk.ac.kcl.inf.simpMusic.Sleep;
import uk.ac.kcl.inf.simpMusic.Solfa;
import uk.ac.kcl.inf.simpMusic.Solfege;
import uk.ac.kcl.inf.simpMusic.SolfegeWithModification;
import uk.ac.kcl.inf.simpMusic.Timbre;
import uk.ac.kcl.inf.simpMusic.TimbreType;
import uk.ac.kcl.inf.simpMusic.Tone;
import uk.ac.kcl.inf.simpMusic.ToneType;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Package</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class SimpMusicPackageImpl extends EPackageImpl implements SimpMusicPackage
{
  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass simpleMusicEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass noteEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass loopNoteEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass solfegeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass sleepEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass solfegeWithModificationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass modificationEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass amplitudeEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass timbreEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EClass toneEClass = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum solfaEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum ampTypeEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum timbreTypeEEnum = null;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private EEnum toneTypeEEnum = null;

  /**
   * Creates an instance of the model <b>Package</b>, registered with
   * {@link org.eclipse.emf.ecore.EPackage.Registry EPackage.Registry} by the package
   * package URI value.
   * <p>Note: the correct way to create the package is via the static
   * factory method {@link #init init()}, which also performs
   * initialization of the package, or returns the registered package,
   * if one already exists.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see org.eclipse.emf.ecore.EPackage.Registry
   * @see uk.ac.kcl.inf.simpMusic.SimpMusicPackage#eNS_URI
   * @see #init()
   * @generated
   */
  private SimpMusicPackageImpl()
  {
    super(eNS_URI, SimpMusicFactory.eINSTANCE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static boolean isInited = false;

  /**
   * Creates, registers, and initializes the <b>Package</b> for this model, and for any others upon which it depends.
   *
   * <p>This method is used to initialize {@link SimpMusicPackage#eINSTANCE} when that field is accessed.
   * Clients should not invoke it directly. Instead, they should simply access that field to obtain the package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #eNS_URI
   * @see #createPackageContents()
   * @see #initializePackageContents()
   * @generated
   */
  public static SimpMusicPackage init()
  {
    if (isInited) return (SimpMusicPackage)EPackage.Registry.INSTANCE.getEPackage(SimpMusicPackage.eNS_URI);

    // Obtain or create and register package
    Object registeredSimpMusicPackage = EPackage.Registry.INSTANCE.get(eNS_URI);
    SimpMusicPackageImpl theSimpMusicPackage = registeredSimpMusicPackage instanceof SimpMusicPackageImpl ? (SimpMusicPackageImpl)registeredSimpMusicPackage : new SimpMusicPackageImpl();

    isInited = true;

    // Create package meta-data objects
    theSimpMusicPackage.createPackageContents();

    // Initialize created meta-data
    theSimpMusicPackage.initializePackageContents();

    // Mark meta-data to indicate it can't be changed
    theSimpMusicPackage.freeze();

    // Update the registry and return the package
    EPackage.Registry.INSTANCE.put(SimpMusicPackage.eNS_URI, theSimpMusicPackage);
    return theSimpMusicPackage;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSimpleMusic()
  {
    return simpleMusicEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSimpleMusic_Notes()
  {
    return (EReference)simpleMusicEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getNote()
  {
    return noteEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getLoopNote()
  {
    return loopNoteEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getLoopNote_Count()
  {
    return (EAttribute)loopNoteEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getLoopNote_Notes()
  {
    return (EReference)loopNoteEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSolfege()
  {
    return solfegeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSolfege_Note()
  {
    return (EAttribute)solfegeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSleep()
  {
    return sleepEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getSleep_Note()
  {
    return (EAttribute)sleepEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getSolfegeWithModification()
  {
    return solfegeWithModificationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSolfegeWithModification_Note()
  {
    return (EReference)solfegeWithModificationEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EReference getSolfegeWithModification_Mods()
  {
    return (EReference)solfegeWithModificationEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getModification()
  {
    return modificationEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getAmplitude()
  {
    return amplitudeEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getAmplitude_Amp()
  {
    return (EAttribute)amplitudeEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getTimbre()
  {
    return timbreEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getTimbre_Timbre()
  {
    return (EAttribute)timbreEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EClass getTone()
  {
    return toneEClass;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getTone_Tone()
  {
    return (EAttribute)toneEClass.getEStructuralFeatures().get(0);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EAttribute getTone_Val()
  {
    return (EAttribute)toneEClass.getEStructuralFeatures().get(1);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getSolfa()
  {
    return solfaEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getAmpType()
  {
    return ampTypeEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getTimbreType()
  {
    return timbreTypeEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EEnum getToneType()
  {
    return toneTypeEEnum;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SimpMusicFactory getSimpMusicFactory()
  {
    return (SimpMusicFactory)getEFactoryInstance();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isCreated = false;

  /**
   * Creates the meta-model objects for the package.  This method is
   * guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void createPackageContents()
  {
    if (isCreated) return;
    isCreated = true;

    // Create classes and their features
    simpleMusicEClass = createEClass(SIMPLE_MUSIC);
    createEReference(simpleMusicEClass, SIMPLE_MUSIC__NOTES);

    noteEClass = createEClass(NOTE);

    loopNoteEClass = createEClass(LOOP_NOTE);
    createEAttribute(loopNoteEClass, LOOP_NOTE__COUNT);
    createEReference(loopNoteEClass, LOOP_NOTE__NOTES);

    solfegeEClass = createEClass(SOLFEGE);
    createEAttribute(solfegeEClass, SOLFEGE__NOTE);

    sleepEClass = createEClass(SLEEP);
    createEAttribute(sleepEClass, SLEEP__NOTE);

    solfegeWithModificationEClass = createEClass(SOLFEGE_WITH_MODIFICATION);
    createEReference(solfegeWithModificationEClass, SOLFEGE_WITH_MODIFICATION__NOTE);
    createEReference(solfegeWithModificationEClass, SOLFEGE_WITH_MODIFICATION__MODS);

    modificationEClass = createEClass(MODIFICATION);

    amplitudeEClass = createEClass(AMPLITUDE);
    createEAttribute(amplitudeEClass, AMPLITUDE__AMP);

    timbreEClass = createEClass(TIMBRE);
    createEAttribute(timbreEClass, TIMBRE__TIMBRE);

    toneEClass = createEClass(TONE);
    createEAttribute(toneEClass, TONE__TONE);
    createEAttribute(toneEClass, TONE__VAL);

    // Create enums
    solfaEEnum = createEEnum(SOLFA);
    ampTypeEEnum = createEEnum(AMP_TYPE);
    timbreTypeEEnum = createEEnum(TIMBRE_TYPE);
    toneTypeEEnum = createEEnum(TONE_TYPE);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private boolean isInitialized = false;

  /**
   * Complete the initialization of the package and its meta-model.  This
   * method is guarded to have no affect on any invocation but its first.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void initializePackageContents()
  {
    if (isInitialized) return;
    isInitialized = true;

    // Initialize package
    setName(eNAME);
    setNsPrefix(eNS_PREFIX);
    setNsURI(eNS_URI);

    // Create type parameters

    // Set bounds for type parameters

    // Add supertypes to classes
    loopNoteEClass.getESuperTypes().add(this.getNote());
    solfegeEClass.getESuperTypes().add(this.getNote());
    sleepEClass.getESuperTypes().add(this.getNote());
    solfegeWithModificationEClass.getESuperTypes().add(this.getNote());
    amplitudeEClass.getESuperTypes().add(this.getModification());
    timbreEClass.getESuperTypes().add(this.getModification());
    toneEClass.getESuperTypes().add(this.getModification());

    // Initialize classes and features; add operations and parameters
    initEClass(simpleMusicEClass, SimpleMusic.class, "SimpleMusic", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSimpleMusic_Notes(), this.getNote(), null, "notes", null, 0, -1, SimpleMusic.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(noteEClass, Note.class, "Note", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(loopNoteEClass, LoopNote.class, "LoopNote", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getLoopNote_Count(), ecorePackage.getEInt(), "count", null, 0, 1, LoopNote.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getLoopNote_Notes(), this.getNote(), null, "notes", null, 0, -1, LoopNote.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(solfegeEClass, Solfege.class, "Solfege", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSolfege_Note(), this.getSolfa(), "note", null, 0, 1, Solfege.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(sleepEClass, Sleep.class, "Sleep", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getSleep_Note(), ecorePackage.getEString(), "note", null, 0, 1, Sleep.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(solfegeWithModificationEClass, SolfegeWithModification.class, "SolfegeWithModification", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEReference(getSolfegeWithModification_Note(), this.getSolfege(), null, "note", null, 0, 1, SolfegeWithModification.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEReference(getSolfegeWithModification_Mods(), this.getModification(), null, "mods", null, 0, -1, SolfegeWithModification.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, IS_COMPOSITE, !IS_RESOLVE_PROXIES, !IS_UNSETTABLE, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(modificationEClass, Modification.class, "Modification", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);

    initEClass(amplitudeEClass, Amplitude.class, "Amplitude", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getAmplitude_Amp(), this.getAmpType(), "amp", null, 0, 1, Amplitude.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(timbreEClass, Timbre.class, "Timbre", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getTimbre_Timbre(), this.getTimbreType(), "timbre", null, 0, 1, Timbre.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    initEClass(toneEClass, Tone.class, "Tone", !IS_ABSTRACT, !IS_INTERFACE, IS_GENERATED_INSTANCE_CLASS);
    initEAttribute(getTone_Tone(), this.getToneType(), "tone", null, 0, 1, Tone.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);
    initEAttribute(getTone_Val(), ecorePackage.getEInt(), "val", null, 0, 1, Tone.class, !IS_TRANSIENT, !IS_VOLATILE, IS_CHANGEABLE, !IS_UNSETTABLE, !IS_ID, IS_UNIQUE, !IS_DERIVED, IS_ORDERED);

    // Initialize enums and add enum literals
    initEEnum(solfaEEnum, Solfa.class, "Solfa");
    addEEnumLiteral(solfaEEnum, Solfa.DO);
    addEEnumLiteral(solfaEEnum, Solfa.RE);
    addEEnumLiteral(solfaEEnum, Solfa.MI);
    addEEnumLiteral(solfaEEnum, Solfa.FA);
    addEEnumLiteral(solfaEEnum, Solfa.SOL);
    addEEnumLiteral(solfaEEnum, Solfa.LA);
    addEEnumLiteral(solfaEEnum, Solfa.SI);

    initEEnum(ampTypeEEnum, AmpType.class, "AmpType");
    addEEnumLiteral(ampTypeEEnum, AmpType.WEAK);
    addEEnumLiteral(ampTypeEEnum, AmpType.STRONG);

    initEEnum(timbreTypeEEnum, TimbreType.class, "TimbreType");
    addEEnumLiteral(timbreTypeEEnum, TimbreType.SHARP);
    addEEnumLiteral(timbreTypeEEnum, TimbreType.FLAT);

    initEEnum(toneTypeEEnum, ToneType.class, "ToneType");
    addEEnumLiteral(toneTypeEEnum, ToneType.HIGH);
    addEEnumLiteral(toneTypeEEnum, ToneType.SUB);

    // Create resource
    createResource(eNS_URI);
  }

} //SimpMusicPackageImpl
