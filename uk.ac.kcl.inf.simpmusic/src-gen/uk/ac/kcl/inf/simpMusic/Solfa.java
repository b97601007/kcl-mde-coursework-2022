/**
 * generated by Xtext 2.25.0
 */
package uk.ac.kcl.inf.simpMusic;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import org.eclipse.emf.common.util.Enumerator;

/**
 * <!-- begin-user-doc -->
 * A representation of the literals of the enumeration '<em><b>Solfa</b></em>',
 * and utility methods for working with them.
 * <!-- end-user-doc -->
 * @see uk.ac.kcl.inf.simpMusic.SimpMusicPackage#getSolfa()
 * @model
 * @generated
 */
public enum Solfa implements Enumerator
{
  /**
   * The '<em><b>Do</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #DO_VALUE
   * @generated
   * @ordered
   */
  DO(0, "Do", "Do"),

  /**
   * The '<em><b>Re</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #RE_VALUE
   * @generated
   * @ordered
   */
  RE(1, "Re", "Re"),

  /**
   * The '<em><b>Mi</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #MI_VALUE
   * @generated
   * @ordered
   */
  MI(2, "Mi", "Mi"),

  /**
   * The '<em><b>Fa</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #FA_VALUE
   * @generated
   * @ordered
   */
  FA(3, "Fa", "Fa"),

  /**
   * The '<em><b>Sol</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #SOL_VALUE
   * @generated
   * @ordered
   */
  SOL(4, "Sol", "Sol"),

  /**
   * The '<em><b>La</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #LA_VALUE
   * @generated
   * @ordered
   */
  LA(5, "La", "La"),

  /**
   * The '<em><b>Si</b></em>' literal object.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #SI_VALUE
   * @generated
   * @ordered
   */
  SI(6, "Si", "Si");

  /**
   * The '<em><b>Do</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #DO
   * @model name="Do"
   * @generated
   * @ordered
   */
  public static final int DO_VALUE = 0;

  /**
   * The '<em><b>Re</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #RE
   * @model name="Re"
   * @generated
   * @ordered
   */
  public static final int RE_VALUE = 1;

  /**
   * The '<em><b>Mi</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #MI
   * @model name="Mi"
   * @generated
   * @ordered
   */
  public static final int MI_VALUE = 2;

  /**
   * The '<em><b>Fa</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #FA
   * @model name="Fa"
   * @generated
   * @ordered
   */
  public static final int FA_VALUE = 3;

  /**
   * The '<em><b>Sol</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #SOL
   * @model name="Sol"
   * @generated
   * @ordered
   */
  public static final int SOL_VALUE = 4;

  /**
   * The '<em><b>La</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #LA
   * @model name="La"
   * @generated
   * @ordered
   */
  public static final int LA_VALUE = 5;

  /**
   * The '<em><b>Si</b></em>' literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #SI
   * @model name="Si"
   * @generated
   * @ordered
   */
  public static final int SI_VALUE = 6;

  /**
   * An array of all the '<em><b>Solfa</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private static final Solfa[] VALUES_ARRAY =
    new Solfa[]
    {
      DO,
      RE,
      MI,
      FA,
      SOL,
      LA,
      SI,
    };

  /**
   * A public read-only list of all the '<em><b>Solfa</b></em>' enumerators.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static final List<Solfa> VALUES = Collections.unmodifiableList(Arrays.asList(VALUES_ARRAY));

  /**
   * Returns the '<em><b>Solfa</b></em>' literal with the specified literal value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param literal the literal.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static Solfa get(String literal)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      Solfa result = VALUES_ARRAY[i];
      if (result.toString().equals(literal))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Solfa</b></em>' literal with the specified name.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param name the name.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static Solfa getByName(String name)
  {
    for (int i = 0; i < VALUES_ARRAY.length; ++i)
    {
      Solfa result = VALUES_ARRAY[i];
      if (result.getName().equals(name))
      {
        return result;
      }
    }
    return null;
  }

  /**
   * Returns the '<em><b>Solfa</b></em>' literal with the specified integer value.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param value the integer value.
   * @return the matching enumerator or <code>null</code>.
   * @generated
   */
  public static Solfa get(int value)
  {
    switch (value)
    {
      case DO_VALUE: return DO;
      case RE_VALUE: return RE;
      case MI_VALUE: return MI;
      case FA_VALUE: return FA;
      case SOL_VALUE: return SOL;
      case LA_VALUE: return LA;
      case SI_VALUE: return SI;
    }
    return null;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final int value;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String name;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private final String literal;

  /**
   * Only this class can construct instances.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  private Solfa(int value, String name, String literal)
  {
    this.value = value;
    this.name = name;
    this.literal = literal;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public int getValue()
  {
    return value;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getLiteral()
  {
    return literal;
  }

  /**
   * Returns the literal value of the enumerator, which is its string representation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    return literal;
  }
  
} //Solfa
