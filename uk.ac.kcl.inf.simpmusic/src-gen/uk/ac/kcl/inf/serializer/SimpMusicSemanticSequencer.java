/*
 * generated by Xtext 2.25.0
 */
package uk.ac.kcl.inf.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import uk.ac.kcl.inf.services.SimpMusicGrammarAccess;
import uk.ac.kcl.inf.simpMusic.Amplitude;
import uk.ac.kcl.inf.simpMusic.LoopNote;
import uk.ac.kcl.inf.simpMusic.SimpMusicPackage;
import uk.ac.kcl.inf.simpMusic.SimpleMusic;
import uk.ac.kcl.inf.simpMusic.Sleep;
import uk.ac.kcl.inf.simpMusic.Solfege;
import uk.ac.kcl.inf.simpMusic.SolfegeWithModification;
import uk.ac.kcl.inf.simpMusic.Timbre;
import uk.ac.kcl.inf.simpMusic.Tone;

@SuppressWarnings("all")
public class SimpMusicSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private SimpMusicGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == SimpMusicPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case SimpMusicPackage.AMPLITUDE:
				sequence_Amplitude(context, (Amplitude) semanticObject); 
				return; 
			case SimpMusicPackage.LOOP_NOTE:
				sequence_LoopNote(context, (LoopNote) semanticObject); 
				return; 
			case SimpMusicPackage.SIMPLE_MUSIC:
				sequence_SimpleMusic(context, (SimpleMusic) semanticObject); 
				return; 
			case SimpMusicPackage.SLEEP:
				sequence_Sleep(context, (Sleep) semanticObject); 
				return; 
			case SimpMusicPackage.SOLFEGE:
				sequence_Solfege(context, (Solfege) semanticObject); 
				return; 
			case SimpMusicPackage.SOLFEGE_WITH_MODIFICATION:
				sequence_SolfegeWithModification(context, (SolfegeWithModification) semanticObject); 
				return; 
			case SimpMusicPackage.TIMBRE:
				sequence_Timbre(context, (Timbre) semanticObject); 
				return; 
			case SimpMusicPackage.TONE:
				sequence_Tone(context, (Tone) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Modification returns Amplitude
	 *     Amplitude returns Amplitude
	 *
	 * Constraint:
	 *     amp=AmpType
	 */
	protected void sequence_Amplitude(ISerializationContext context, Amplitude semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpMusicPackage.Literals.AMPLITUDE__AMP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpMusicPackage.Literals.AMPLITUDE__AMP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAmplitudeAccess().getAmpAmpTypeEnumRuleCall_0(), semanticObject.getAmp());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Note returns LoopNote
	 *     LoopNote returns LoopNote
	 *
	 * Constraint:
	 *     (count=INT notes+=Note*)
	 */
	protected void sequence_LoopNote(ISerializationContext context, LoopNote semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     SimpleMusic returns SimpleMusic
	 *
	 * Constraint:
	 *     notes+=Note+
	 */
	protected void sequence_SimpleMusic(ISerializationContext context, SimpleMusic semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Note returns Sleep
	 *     Sleep returns Sleep
	 *
	 * Constraint:
	 *     note='-'
	 */
	protected void sequence_Sleep(ISerializationContext context, Sleep semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpMusicPackage.Literals.SLEEP__NOTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpMusicPackage.Literals.SLEEP__NOTE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSleepAccess().getNoteHyphenMinusKeyword_0(), semanticObject.getNote());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Note returns SolfegeWithModification
	 *     SolfegeWithModification returns SolfegeWithModification
	 *
	 * Constraint:
	 *     (note=Solfege mods+=Modification+)
	 */
	protected void sequence_SolfegeWithModification(ISerializationContext context, SolfegeWithModification semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Note returns Solfege
	 *     Solfege returns Solfege
	 *
	 * Constraint:
	 *     note=Solfa
	 */
	protected void sequence_Solfege(ISerializationContext context, Solfege semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpMusicPackage.Literals.SOLFEGE__NOTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpMusicPackage.Literals.SOLFEGE__NOTE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSolfegeAccess().getNoteSolfaEnumRuleCall_0(), semanticObject.getNote());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Modification returns Timbre
	 *     Timbre returns Timbre
	 *
	 * Constraint:
	 *     timbre=TimbreType
	 */
	protected void sequence_Timbre(ISerializationContext context, Timbre semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpMusicPackage.Literals.TIMBRE__TIMBRE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpMusicPackage.Literals.TIMBRE__TIMBRE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getTimbreAccess().getTimbreTimbreTypeEnumRuleCall_0(), semanticObject.getTimbre());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Modification returns Tone
	 *     Tone returns Tone
	 *
	 * Constraint:
	 *     (tone=ToneType val=INT)
	 */
	protected void sequence_Tone(ISerializationContext context, Tone semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, SimpMusicPackage.Literals.TONE__TONE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpMusicPackage.Literals.TONE__TONE));
			if (transientValues.isValueTransient(semanticObject, SimpMusicPackage.Literals.TONE__VAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, SimpMusicPackage.Literals.TONE__VAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getToneAccess().getToneToneTypeEnumRuleCall_0_0(), semanticObject.getTone());
		feeder.accept(grammarAccess.getToneAccess().getValINTTerminalRuleCall_1_0(), semanticObject.getVal());
		feeder.finish();
	}
	
	
}
