/**
 * generated by Xtext 2.25.0
 */
package uk.ac.kcl.inf.ui.quickfix;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.ui.editor.model.edit.IMultiModification;
import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider;
import org.eclipse.xtext.ui.editor.quickfix.Fix;
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor;
import org.eclipse.xtext.validation.Issue;
import uk.ac.kcl.inf.simpMusic.LoopNote;
import uk.ac.kcl.inf.simpMusic.Tone;
import uk.ac.kcl.inf.simpMusic.ToneType;
import uk.ac.kcl.inf.validation.SimpMusicValidator;

/**
 * Custom quickfixes.
 * 
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#quick-fixes
 */
@SuppressWarnings("all")
public class SimpMusicQuickfixProvider extends DefaultQuickfixProvider {
  @Fix(SimpMusicValidator.INVALID_TONE)
  public void resetTone(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IMultiModification<EObject> _function = (EObject element) -> {
      final Tone tone = ((Tone) element);
      ToneType _tone = tone.getTone();
      boolean _tripleEquals = (_tone == ToneType.HIGH);
      if (_tripleEquals) {
        tone.setVal(13);
      } else {
        tone.setVal(4);
      }
    };
    acceptor.<EObject>acceptMulti(issue, "reset it to max/min value", "Reset the tone to acceptable max/min value", null, _function);
  }
  
  @Fix(SimpMusicValidator.INVALID_LOOP_COUNT)
  public void resetLoopCount(final Issue issue, final IssueResolutionAcceptor acceptor) {
    final IMultiModification<EObject> _function = (EObject element) -> {
      final LoopNote loopNote = ((LoopNote) element);
      loopNote.setCount(1);
    };
    acceptor.<EObject>acceptMulti(issue, "minimum loop count: 1", "Reset the loop count to minimum value", null, _function);
  }
}
