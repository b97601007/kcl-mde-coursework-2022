/*
 * generated by Xtext 2.25.0
 */
package uk.ac.kcl.inf.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import uk.ac.kcl.inf.ide.contentassist.antlr.internal.InternalSimpMusicParser;
import uk.ac.kcl.inf.services.SimpMusicGrammarAccess;

public class SimpMusicParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(SimpMusicGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, SimpMusicGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getNoteAccess().getAlternatives(), "rule__Note__Alternatives");
			builder.put(grammarAccess.getModificationAccess().getAlternatives(), "rule__Modification__Alternatives");
			builder.put(grammarAccess.getSolfaAccess().getAlternatives(), "rule__Solfa__Alternatives");
			builder.put(grammarAccess.getAmpTypeAccess().getAlternatives(), "rule__AmpType__Alternatives");
			builder.put(grammarAccess.getTimbreTypeAccess().getAlternatives(), "rule__TimbreType__Alternatives");
			builder.put(grammarAccess.getToneTypeAccess().getAlternatives(), "rule__ToneType__Alternatives");
			builder.put(grammarAccess.getLoopNoteAccess().getGroup(), "rule__LoopNote__Group__0");
			builder.put(grammarAccess.getSolfegeWithModificationAccess().getGroup(), "rule__SolfegeWithModification__Group__0");
			builder.put(grammarAccess.getToneAccess().getGroup(), "rule__Tone__Group__0");
			builder.put(grammarAccess.getSimpleMusicAccess().getNotesAssignment(), "rule__SimpleMusic__NotesAssignment");
			builder.put(grammarAccess.getLoopNoteAccess().getCountAssignment_0(), "rule__LoopNote__CountAssignment_0");
			builder.put(grammarAccess.getLoopNoteAccess().getNotesAssignment_3(), "rule__LoopNote__NotesAssignment_3");
			builder.put(grammarAccess.getSolfegeAccess().getNoteAssignment(), "rule__Solfege__NoteAssignment");
			builder.put(grammarAccess.getSleepAccess().getNoteAssignment(), "rule__Sleep__NoteAssignment");
			builder.put(grammarAccess.getSolfegeWithModificationAccess().getNoteAssignment_0(), "rule__SolfegeWithModification__NoteAssignment_0");
			builder.put(grammarAccess.getSolfegeWithModificationAccess().getModsAssignment_2(), "rule__SolfegeWithModification__ModsAssignment_2");
			builder.put(grammarAccess.getAmplitudeAccess().getAmpAssignment(), "rule__Amplitude__AmpAssignment");
			builder.put(grammarAccess.getTimbreAccess().getTimbreAssignment(), "rule__Timbre__TimbreAssignment");
			builder.put(grammarAccess.getToneAccess().getToneAssignment_0(), "rule__Tone__ToneAssignment_0");
			builder.put(grammarAccess.getToneAccess().getValAssignment_1(), "rule__Tone__ValAssignment_1");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private SimpMusicGrammarAccess grammarAccess;

	@Override
	protected InternalSimpMusicParser createParser() {
		InternalSimpMusicParser result = new InternalSimpMusicParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SimpMusicGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SimpMusicGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
